<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>oradcl 创建实例技术分享</title>
      <link href="wiki/Linux/oradcl/"/>
      <url>wiki/Linux/oradcl/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="544f546d69d11d89fc8eeade49fda22e7a55f39584323623aa3fb24557128309"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oradcl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端之 iTerm2 美化</title>
      <link href="wiki/Mac/maciTerm2/"/>
      <url>wiki/Mac/maciTerm2/</url>
      
        <content type="html"><![CDATA[<h2 id="打造-Mac-下高颜值好用的终端环境"><a href="#打造-Mac-下高颜值好用的终端环境" class="headerlink" title="打造 Mac 下高颜值好用的终端环境"></a>打造 Mac 下高颜值好用的终端环境</h2><p>如果你觉得当前的终端操作不符合你的气质，可以看看我今天来介绍的 Mac 终端利器，不过不会介绍太多细节操作。</p><p><img src="/../images/16080479554960.jpg" alt="-w953"></p><h3 id="它们是谁？"><a href="#它们是谁？" class="headerlink" title="它们是谁？"></a>它们是谁？</h3><ul><li>iTerm2：号称 Mac 下最好的终端工具（嗯，我也这么认为，毕竟我不会别的了）</li><li>zsh：一款强大的终端工具，能帮助你更高效地编写和执行命令。</li></ul><h3 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h3><p>下面的安装我几乎都用 <code>brew</code> 方式了，如果你还不懂什么是 <code>brew</code> 可以看看 <a href="https://brew.sh/">这个</a>。</p><p>所以下面我假设你已经安装了 <code>Homebrew</code>。</p><p>如果你从来没有运行过 <code>brew cask</code> 命令，可以先执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/cask</span><br></pre></td></tr></table></figure><p>多执行也不会怀孕的，放心！<br>然后开始安装 <code>iTerm2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure><p>安装成功后在 Launchpad 中可以看到有一个新图标出现，打开 <code>iTerm2</code>。</p><h3 id="代码配色"><a href="#代码配色" class="headerlink" title="代码配色"></a>代码配色</h3><p>默认的界面还是略显丑陋的，我们来设置一下代码配色吧。<br><img src="/../images/16080482724529.png"></p><p>先检查下终端颜色配置为 <code>xterm-256color</code>，位置在 <code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Terminal</code>。<br><img src="/../images/16080483035822.png"></p><p>然后就可以设置配色了，默认情况下 <code>iTerm2</code> 只有 7 种自带的配色，当然满足不了我们高颜值的需求了。有人就开源了一款叫 <code>iTerm2-Color-Schemes</code> 的配色合集，里面有各种经典、常用的配色方案，来使用 Git 下载到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/iterm2 &amp;&amp; <span class="built_in">cd</span> ~/iterm2</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mbadolato/iTerm2-Color-Schemes</span><br></pre></td></tr></table></figure><p>这里我创建了一个 ~/iterm2 的目录，放在别的目录都可以，它的目录结构是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> ~/iterm2/iTerm2-Color-Schemes $ ls -la</span><br><span class="line">total 72</span><br><span class="line">-rw-r--r--    1 biezhi  staff  34131 Nov  6 11:34 README.md</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 Xresources</span><br><span class="line">drwxr-xr-x    3 biezhi  staff     96 Nov  6 11:34 backgrounds</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 konsole</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 putty</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 remmina</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 schemes</span><br><span class="line">drwxr-xr-x  200 biezhi  staff   6400 Nov  6 11:34 screenshots</span><br><span class="line">drwxr-xr-x  180 biezhi  staff   5760 Nov  6 11:34 terminal</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 terminator</span><br><span class="line">drwxr-xr-x  199 biezhi  staff   6368 Nov  6 11:34 termite</span><br><span class="line">drwxr-xr-x  162 biezhi  staff   5184 Nov  6 11:34 tilda</span><br><span class="line">drwxr-xr-x   19 biezhi  staff    608 Nov  6 11:34 tools</span><br><span class="line">drwxr-xr-x    3 biezhi  staff     96 Nov  6 11:34 xfce4terminal</span><br><span class="line">drwxr-xr-x  198 biezhi  staff   6336 Nov  6 11:34 xrdb</span><br></pre></td></tr></table></figure><p>下面需要导入配色方案。</p><p><img src="/../images/16080483810767.png"></p><p><img src="/../images/16080483883413.png"></p><p>选择 <code>schemes</code> 文件夹内的所有配色方案。<br>导入成功后就可以选择一些流行的配色方案了。<br><img src="/../images/16080484413575.png"><br>选择配色后再去你的 iTerm 里面看会发现，已经好看了那么一点。</p><h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><p>为什么要安装字体呢？我们电脑的字体其实是可以用的，但是想要图标的这种字体就没法儿了：</p><p><img src="/../images/16080484746447.png"><br>而这些图标字体其实是非 <code>ASCII</code> 码字体，在 iTerm2 中可以进行配置，所以先要安装这个字体。这款字体叫 <a href="https://github.com/ryanoasis/nerd-fonts">nerd-fonts</a>，它支持下面这么多种图标。<br><img src="/../images/16080486522446.jpg" alt="-w841"></p><p>使用 brew 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure><p>注意：安装的时候会去 Github 下载字体，如果你下载失败可能是被墙了。</p><p>那么可以通过 https_proxy=127.0.0.1:1087 brew cask reinstall font-hack-nerd-font 的方式安装，前提是你开启了代理。<br>安装成功后需要在 iTerm2 中配置一下，在 <code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font</code> 栏位中，Text 下面勾选 <code>Use a different font for non-ASCII text</code>，然后在 <code>Non-ASCII font </code>点击 <code>Change font</code> 修改：</p><p><img src="/../images/16080487239227.png"></p><p><img src="/../images/16080487289339.png"></p><p>这里选择的字体是非 ASCII 码字符的字体，不要设置错了！选择好之后关闭即可。</p><h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><p><img src="/../images/16080487593892.png"></p><p>默认的 shell 是 bash，需要修改为 zsh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&quot;echo <span class="subst">$(which zsh)</span> &gt;&gt; /etc/shells&quot;</span></span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure><p>修改时会提示你输入密码。</p><p>现在 zsh 安装完成了，安装虽简单，可配置麻烦啊，这你能忍吗？？当然不能！</p><p>于是，<code>oh-my-zsh</code> 出现了，有了它 zsh 配置起来就方便多了，来安装一下它。<br><img src="/../images/16080487959635.png"></p><p>安装好之后可以看到界面发生了一点点变化，同时会产生一个名为 <code>.zshrc</code> 的配置文件，在用户家目录下面，我们以后主要就是修改它了。</p><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>上面看到界面发生变化是因为 <code>oh-my-zsh</code> 默认帮我们配置了一个终端主题，你可以打开 <code>~/.zshrc</code> 文件看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span><br></pre></td></tr></table></figure><p>这些主题文件存储在 <code>~/.oh-my-zsh/themes </code>目录下，你也可以使用其他的。</p><p>为了实现前面想要的酷炫的终端主题，有人写了一个名为 <a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a> 的高颜值主题。<br><img src="/../images/powerlevel9k-1.gif" alt="powerlevel9k"></p><p>看到这么骚的操作，赶紧来安装吧！先将主题下载到本地的主题目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p>然后修改 zsh 主题配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br></pre></td></tr></table></figure><p>修改配置文件后一定要记得让配置生效，使用 source 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>现在来打开终端看看变成什么样子了！<br>如果你喜欢这个风格的话可以不用进行其他主题设置了，为了让它看起来简洁一点，我在 .zshrc 配置中又添加了几行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POWERLEVEL9K_MODE=<span class="string">&quot;nerdfont-complete&quot;</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon ssh root_indicator dir dir_writable vcs)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status virtualenv anaconda proxy battery)</span><br></pre></td></tr></table></figure><ul><li><code>POWERLEVEL9K_MODE</code>：设置 powerlevel10k 的字体是我们前面下载的</li><li><code>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</code>：设置左边要显示的元素</li><li><code>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</code>：设置右边要显示的元素</li></ul><p>具体想要设置什么元素，可以在作者的GitHub主页找到</p><h3 id="别名设置"><a href="#别名设置" class="headerlink" title="别名设置"></a>别名设置</h3><p>装好 zsh 之后顺手就添加一下我自己常用的别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> vi=<span class="string">&quot;vim&quot;</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">&quot;colorls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> free=<span class="string">&quot;top -l 1 | head -n 10 | grep PhysMem&quot;</span></span><br><span class="line"><span class="built_in">alias</span> goproxy_http=<span class="string">&quot;export export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> goproxy_socks=<span class="string">&quot;export all_proxy=socks5://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&quot;unset http_proxy https_proxy all_proxy&quot;</span></span><br></pre></td></tr></table></figure><p>这样我们只需要输入较短的命令就可以干大事情了！当然这里你可以设置更多自己熟悉的一些操作，比如和编程语言相关的等等。</p><h3 id="zsh-插件推荐"><a href="#zsh-插件推荐" class="headerlink" title="zsh 插件推荐"></a>zsh 插件推荐</h3><p>zsh 那些酷插件可多了去了，我只推荐几个我认为比较实用的。</p><h4 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h4><p>这个插件是用于解压的，解压各种包命令多可能会手误，用它只需要输入 <code>x biezhi.zip</code> 即可。</p><p>在 <code>.zshrc</code> 的 <code>plugins</code> 中添加 <code>extract</code> 配置即可，它支持解压 <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract">这些</a> 文件。</p><h4 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h4><p>这个插件主要帮助我们记住目录，一键直达。只要你脑海里有目录的几个字母，然后使用 <code>j [你知道的]</code> 按下 tab 即可，不用 <code>cd cd cd</code> 慢慢找。举个栗子：</p><p>我使用 <code>cd</code> 进入了 <code>blog</code> 这个目录，还进入了 <code>gitmoji</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> workspace/projects/github/blog</span><br></pre></td></tr></table></figure><p>如果用 <code>autojump</code> 的话，现在想进入 <code>blog</code> 目录只需要 <code>j blog</code> 即可，一般我们都会按下 tab 确定目录位置，当遇到多个类似的目录名的时候它会提示你输入数字进入。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><p>安装后添加到 <code>autojump</code> 到 zsh 的 插件配置（plugins）里，再追加一句命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure><p>让配置文件生效即可。</p><h4 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h4><p>zsh-syntax-highlighting 用于高亮你的 <code>zsh</code> 可用命令，比如输入 <code>sleep</code>、<code>cat</code> 这些命令的时候就会高亮（功能上确实没啥用）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>安装好就行了，不用在 plugins 中追加。</p><h4 id="colors"><a href="#colors" class="headerlink" title="colors"></a>colors</h4><p><a href="https://github.com/athityakumar/colorls">colors</a> 是一个 Ruby 实现的脚本，它可以配合 powerlevel9k 显示电脑上的文件图标（应该是通过后缀判断的），使用的效果如下：<br><img src="/../images/16080499577997.png"></p><p>安装后就可以使用了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install colorls</span><br></pre></td></tr></table></figure><h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><ul><li>连续按两次 <code>tab</code> 会补全列表，补全项可以使用 <code>ctrl+n/p/f/b</code> 上下左右切换</li><li>输入目录名即可进入，不用 <code>cd</code> 了，输入 <code>..</code> 即可到上级目录，返回上次目录输入 <code>-</code></li><li>输入 <code>d</code> 即可看到目录列表</li><li>智能的命令纠错功能（需开启 ENABLE_CORRECTION 配置）</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这样配置后打开 VSCode 就变成这幅样子：</p><p><img src="/../images/16080500784448.png"></p><p>如何修复呢？只需要在 vscode 的配置文件中加入下面的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;terminal.integrated.fontFamily&quot;</span>: <span class="string">&quot;Hack Nerd Font&quot;</span>,</span><br><span class="line"><span class="string">&quot;terminal.integrated.fontSize&quot;</span>: 14,</span><br></pre></td></tr></table></figure><p>这样就会变成下面这个样子了。</p><p><img src="/../images/16080501096812.png"></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python倒计时显示的应用</title>
      <link href="wiki/Python/Python%E5%80%92%E8%AE%A1%E6%97%B6%E6%98%BE%E7%A4%BA%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>wiki/Python/Python%E5%80%92%E8%AE%A1%E6%97%B6%E6%98%BE%E7%A4%BA%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们在写Python程序的时候，有时候会用到一些倒计时的显示效果，于是把几种常用的倒计时显示效果记录下来，方便回顾。</p><p><code>\r</code> 表示将光标的位置回退到本行的开头位置<br><code>\b</code> 表示将光标的位置回退一位</p><p>在 Python 语言中， 使用 <code>print</code> 打印输出时，默认是会进行换行的。如何让其不换行呢？</p><p>在 Python 3.x 中，<code>print</code> 成为了一个独立的函数，有一个 <code>end</code> 参数，可以指定输出的结束符，默认是 <code>\n</code></p><h3 id="倒计时显示"><a href="#倒计时显示" class="headerlink" title="倒计时显示"></a>倒计时显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    print(<span class="string">&quot;\r倒计时&#123;&#125;秒！&quot;</span>.<span class="built_in">format</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">&quot;\r倒计时结束！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="原地转圈显示"><a href="#原地转圈显示" class="headerlink" title="原地转圈显示"></a>原地转圈显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">Time = <span class="number">10</span>  <span class="comment"># 设置倒计时时间</span></span><br><span class="line">interval = <span class="number">0.25</span>  <span class="comment"># 设置屏幕刷新的间隔时间</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">int</span>(Time / interval)):</span><br><span class="line">    <span class="built_in">list</span> = [<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line">    index = i % <span class="number">4</span></span><br><span class="line">    print(<span class="string">&quot;\r程序正在运行 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">list</span>[index]), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    time.sleep(interval)</span><br></pre></td></tr></table></figure><h3 id="进度条显示"><a href="#进度条显示" class="headerlink" title="进度条显示"></a>进度条显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">为了让进度条保证100%，需要让&#x27;Time&#x27;/&#x27;interval&#x27;的值等于100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">Time = <span class="number">5</span>  <span class="comment"># 设置倒计时时间</span></span><br><span class="line">interval = <span class="number">0.05</span>  <span class="comment"># 设置屏幕刷新的间隔时间</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">int</span>(Time / interval) + <span class="number">1</span>):</span><br><span class="line">    print(<span class="string">&quot;\r正在加载:&quot;</span> + <span class="string">&quot;|&quot;</span> + <span class="string">&quot;&gt;&quot;</span> * i + <span class="string">&quot; &quot;</span> * (<span class="built_in">int</span>(Time / interval) + <span class="number">1</span> - i) + <span class="string">&quot;|&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;%&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    time.sleep(interval)</span><br><span class="line">print(<span class="string">&quot;\r加载完成！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="基于Requests下载文件集成进度条显示的函数"><a href="#基于Requests下载文件集成进度条显示的函数" class="headerlink" title="基于Requests下载文件集成进度条显示的函数"></a>基于Requests下载文件集成进度条显示的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_from_url</span>(<span class="params">URL, file_path</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_size = <span class="built_in">int</span>(urlopen(URL).info().get(<span class="string">&#x27;Content-Length&#x27;</span>, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">            first_byte = os.path.getsize(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            first_byte = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> first_byte &gt;= file_size:</span><br><span class="line">            <span class="keyword">return</span> file_size</span><br><span class="line">        header = &#123;<span class="string">&quot;Range&quot;</span>: <span class="string">&quot;bytes=%s-%s&quot;</span> % (first_byte, file_size)&#125;</span><br><span class="line">        para = tqdm(</span><br><span class="line">            total=file_size, initial=first_byte,</span><br><span class="line">            unit=<span class="string">&#x27;B&#x27;</span>, unit_scale=<span class="literal">True</span>, desc=URL.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">        req = requests.get(URL, headers=header, stream=<span class="literal">True</span>)</span><br><span class="line">        file_name = file_path + <span class="string">&#x27;.rar&#x27;</span></span><br><span class="line">        <span class="keyword">with</span>(<span class="built_in">open</span>(file_name, <span class="string">&#x27;ab&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> req.iter_content(chunk_size=<span class="number">1024</span>):</span><br><span class="line">                <span class="keyword">if</span> chunk:</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">                    para.update(<span class="number">1024</span>)</span><br><span class="line">        para.close()</span><br><span class="line">        Unpack_file(file_path, file_name)</span><br><span class="line">        <span class="keyword">return</span> file_size</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> E:</span><br><span class="line">        print(E)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Mac的TimeMachine备份服务器</title>
      <link href="wiki/Mac/%E6%90%AD%E5%BB%BAMac%E7%9A%84TimeMachine%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>wiki/Mac/%E6%90%AD%E5%BB%BAMac%E7%9A%84TimeMachine%E5%A4%87%E4%BB%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>    MAC系统的Time Machine（时间机器）功能十分好用，顾名思义，它可以让你在系统崩溃了之后，还有后悔药吃，通过Time Machine瞬间回到之前的状态。Time Machine支持以下几种存储设备</p><ul><li>    连接到 Mac 的外置驱动器，例如 USB、雷雳或 FireWire 驱动器</li><li>    连接到 AirPort Extreme 基站（802.11ac 机型）或 AirPort 时间返回舱的外置驱动器</li><li>    AirPort 时间返回舱</li><li>    支持通过 SMB 进行“时间机器”备份的联网储存 (NAS) 设备</li><li>    共享为“时间机器”备份目标位置的 Mac</li></ul><p>最简单的使用办法就是，给Mac配置一个移动硬盘，这样Mac就可以通过Time Machine备份到移动硬盘，但是这种方案有个弊端，就是移动硬盘必须时刻挂载到Mac上，很不方便。<br>但是我们可以通过netatalk让闲置的机器，变成一台TimeCapsule，实现无线备份。下面我将通过Centos7系统，演示如何搭建TimeCapsule让Mac实现无线备份</p><h2 id="安装-Netatalk"><a href="#安装-Netatalk" class="headerlink" title="安装 Netatalk"></a>安装 Netatalk</h2><p>Netatalk是一个免费开源的AppleTalk通信协议的实现，Linux 或者BSD系统通过它可以充当Mac的文件服务器（AppleShare File Server， 网络协议是AFP）、AppleTalk 路由、打印服务器等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">yum install wget gcc make libgcrypt-devel libdb-devel -y</span><br><span class="line"><span class="comment">#下载安装包并编译安装</span></span><br><span class="line">wget http://sourceforge.net/projects/netatalk/files/netatalk/3.1.12/netatalk-3.1.12.tar.gz</span><br><span class="line">tar -zxvf netatalk-3.1.12.tar.gz &amp;&amp; mv netatalk-3.1.12 netatalk &amp;&amp; <span class="built_in">cd</span> netatalk</span><br><span class="line">./configure --with-init-style=redhat-systemd</span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure><h3 id="配置-Netatalk"><a href="#配置-Netatalk" class="headerlink" title="配置 Netatalk"></a>配置 Netatalk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/etc/afp.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">; Netatalk 3.x configuration file</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">[Global]</span><br><span class="line">; Global server settings</span><br><span class="line"><span class="built_in">log</span> level = default:warn</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/afpd.log</span><br><span class="line">hosts allow = 192.168.254.0/24</span><br><span class="line">spotlight = yes</span><br><span class="line"></span><br><span class="line">; [Homes]</span><br><span class="line">; basedir regex = /home</span><br><span class="line"></span><br><span class="line">; [My AFP Volume]</span><br><span class="line">; path = /path/to/volume</span><br><span class="line"></span><br><span class="line">[Time Machine]</span><br><span class="line">path = /home/yourname/TimeMachine</span><br><span class="line">valid users = yourname</span><br><span class="line">time machine = yes</span><br><span class="line">ea = auto</span><br><span class="line">spotlight = no</span><br></pre></td></tr></table></figure><p>上述配置需要修改以下几个地方：</p><ul><li> <code>hosts allow</code> 的IP地址为你的centos机器的IP地址</li><li> <code>valid users</code> 是你们的用户名，因为不能直接使用root用户，所以我们需要新建一个普通用户，可以通过 <code>useradd yourname</code> 来创建你的用户</li><li> <code>path</code>为你Mac备份的文件位置，建议放到你的用户家目录</li></ul><p>修改完上面的配置文件之后，我们还需要创建一个用户和备份目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">useradd yourname</span><br><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line">passwd yourname</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建备份目录</span></span><br><span class="line">mkdir -p /home/yourname/TimeMachine</span><br><span class="line"><span class="comment"># 修改目录权限</span></span><br><span class="line">chown -R yourname:yourname /home/yourname/</span><br></pre></td></tr></table></figure><h2 id="安装-Avahi-用于网络发现"><a href="#安装-Avahi-用于网络发现" class="headerlink" title="安装 Avahi 用于网络发现"></a>安装 Avahi 用于网络发现</h2><p>Avahi允许程序在不需要进行手动网络配置的情况 下，在一个本地网络中发布和获知各种服务和主机。例如，当某用户把他的计算机接入到某个局域网时，如果他的机器运行有Avahi服务，则Avahi程式自动广播，从而发现网络中可用的打印机、共享文件和可相互聊天的其他用户。这有点象他正在接收局域网中的各种网络广告一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install avahi -y</span><br></pre></td></tr></table></figure><p>然后增加配置文件 <code>vi /etc/avahi/services/afpd.service</code> 如果没有的话就新建一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&#x27;no&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">service-group</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;avahi-service.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> <span class="attr">replace-wildcards</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>%h<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>_afpovertcp._tcp<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>548<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>_device-info._tcp<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>0<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">txt-record</span>&gt;</span>model=TimeCapsule<span class="tag">&lt;/<span class="name">txt-record</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service-group</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start avahi-daemon</span><br><span class="line">systemctl start netatalk</span><br><span class="line">systemctl <span class="built_in">enable</span> avahi-daemon</span><br><span class="line">systemctl <span class="built_in">enable</span> netatalk</span><br></pre></td></tr></table></figure><h2 id="Mac端配置"><a href="#Mac端配置" class="headerlink" title="Mac端配置"></a>Mac端配置</h2><p>如果以上操作没问题的话，现在你的<code>访达&gt;网络</code>中将会看到刚刚配置好的TimeCapsule服务器<br><img src="/images/16020651816496.jpg"><br>我们双击打开这个TimeCapsule，如果提示连接失败，请<code>关闭防火墙或者开放 548 端口，否则可能无法连接到netatalk暴露的端口</code><br><img src="/images/16020655035112.jpg"><br>然后输入刚刚创建的账户和密码，就能成功连接这个TimeCapsule<br>接下来，我们打开<code>系统偏好设置</code>中的<code>时间机器</code> 选择这个磁盘，享受无线备份带来的快乐吧<br><img src="/images/16020718144051.jpg"></p><h2 id="恢复文件或恢复系统"><a href="#恢复文件或恢复系统" class="headerlink" title="恢复文件或恢复系统"></a>恢复文件或恢复系统</h2><h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><p>点击状态栏时间机器图标，或通过启动台打开时间机器，稍等片刻便会加载出网络上的时间机器的备份内容，右键某个时间到你想恢复的文件，选择恢复即可<br><img src="/images/16020661138086.jpg"></p><h2 id="恢复系统"><a href="#恢复系统" class="headerlink" title="恢复系统"></a>恢复系统</h2><p>如果你的MAC挂了，可以通过如下方式全盘恢复你的MAC到一个时间点</p><p>按住「command+R」启动Mac，直到进入「Recovery」模式。<br><img src="/images/16020663746970.jpg"></p><p>选择「从Time Machine 备份进行恢复」<br><img src="/images/16020663900614.jpg"></p><p>选择网络上的分区，输入账号密码连接即可.</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将AmazonSNS通知转发到Telegram</title>
      <link href="wiki/Python/%E5%B0%86AmazonSNS%E9%80%9A%E7%9F%A5%E8%BD%AC%E5%8F%91%E5%88%B0Telegram/"/>
      <url>wiki/Python/%E5%B0%86AmazonSNS%E9%80%9A%E7%9F%A5%E8%BD%AC%E5%8F%91%E5%88%B0Telegram/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>　　Amazon Simple Notification Service（SNS）是一项Web服务，允许从应用程序发布消息，然后立即将其传递给订阅者或其他应用程序。</p><p>发布者将消息发送到SNS主题，Amazon SNS服务将该消息（通知）传递给该SNS主题的订阅者。支持的通知协议是HTTP/S，SQS，Lambda，移动推送，电子邮件或SMS。</p><p>如果希望将通知传递到Telegram聊天中，则不能简单地使用HTTP/S端点将SNS主题与Telegram Bot API集成在一起。您需要创建一个简单的Lambda函数，该函数调用Bot API将通知转发到Telegram聊天。以下过程描述了如何进行。</p><h2 id="如何将SNS通知转发到Telegram"><a href="#如何将SNS通知转发到Telegram" class="headerlink" title="如何将SNS通知转发到Telegram"></a>如何将SNS通知转发到Telegram</h2><p>　　在此过程中，您将创建一个Telegram bot。机器人是由软件而非人员操作的电报帐户。在我们的案例中，该机器人由Lambda函数操作，该函数代表该机器人将通知发送到Telegram聊天，通信是单向的。也就是说，该程序会向您发送消息，但不会处理您收到的任何消息。<br><img src="/images/16018693292523.jpg"><br>要将SNS通知转发到Telegram聊天，请执行以下步骤：</p><h3 id="创建一个新的Telegram机器人。"><a href="#创建一个新的Telegram机器人。" class="headerlink" title="创建一个新的Telegram机器人。"></a>创建一个新的Telegram机器人。</h3><ol><li><p>在您的Telegram应用中，搜索@BotFather并按下Start按钮（或发送/start命令）。然后，发送/newbot命令并遵循一些简单的步骤来创建一个新的Telegram机器人。BotFather为您的新机器人生成一个授权令牌。令牌是看起来像字符串123456789:ABCD1234efgh5678-IJKLM。需要将请求发送到Telegram Bot API。</p></li><li><p>在您的Telegram应用中，按名称搜索刚创建的机器人，然后按Start按钮（或发送/start命令）。然后，将任何测试消息写入与您的机器人聊天。例如，写Hello。</p></li><li><p>执行Bot API调用以获取与机器人聊天的ID。<br> 在以下命令中，替换<token>为从BotFather收到的授权令牌。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;https://api.telegram.org/bot&lt;token&gt;/getUpdates&#x27;</span> | python -m json.tool</span><br></pre></td></tr></table></figure><p> 在输出中，找到您的测试消息和相应的聊天ID。例如，在以下输出中，聊天ID为<code>-478223748</code>。</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ok&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;message&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;chat&quot;</span>: &#123;</span><br><span class="line">          ...</span><br><span class="line">          &quot;id&quot;: -478223748,</span><br><span class="line">          ...</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        &quot;message_id&quot;: 2,</span><br><span class="line">        &quot;text&quot;: &quot;Hello&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="新建SNS主题"><a href="#新建SNS主题" class="headerlink" title="新建SNS主题"></a>新建SNS主题</h3><p>通过以下网址打开Amazon SNS控制台：<a href="https://console.aws.amazon.com/sns/home">https://console.aws.amazon.com/sns/home</a>，然后在您选择的AWS区域中创建一个新的SNS主题。</p><h3 id="新建Lambda函数"><a href="#新建Lambda函数" class="headerlink" title="新建Lambda函数"></a>新建Lambda函数</h3><p>通过以下网址打开Lambda管理控制台：<a href="https://console.aws.amazon.com/lambda/home">https://console.aws.amazon.com/lambda/home</a>，然后切换到创建SNS主题的同一AWS区域。然后，使用以下配置创建一个新的Lambda函数。<br>    <strong>运行时</strong>：<code>Python 3.7</code><br>    <strong>执行角色</strong>：<code>创建一个新的Lambda IAM角色，该角色具有以下内联策略</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;logs:CreateLogGroup&quot;</span>, <span class="string">&quot;logs:CreateLogStream&quot;</span>, <span class="string">&quot;logs:PutLogEvents&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:logs:*:*:*&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能代码</strong>：<code>使用以下代码段</code><br>此函数执行Telegram Bot API的sendMessage方法以将SNS消息（通知）转发到Telegram聊天。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone, timedelta</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse, error</span><br><span class="line"></span><br><span class="line">MAX_CHUNK_SIZE = <span class="number">4096</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getObject</span>(<span class="params">msg, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> msg.get(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://api.telegram.org/bot%s/sendMessage&#x27;</span> % os.environ[<span class="string">&#x27;TOKEN&#x27;</span>]</span><br><span class="line">    message = event[<span class="string">&#x27;Records&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;Sns&#x27;</span>][<span class="string">&#x27;Message&#x27;</span>]</span><br><span class="line">    null = <span class="string">&#x27;null&#x27;</span></span><br><span class="line">    msg = <span class="built_in">eval</span>(message)</span><br><span class="line"></span><br><span class="line">    now = datetime.now().astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line">    Name = getObject(msg,<span class="string">&#x27;AlarmName&#x27;</span>)</span><br><span class="line">    Time = getObject(msg,<span class="string">&#x27;StateChangeTime&#x27;</span>)</span><br><span class="line">    Reason = getObject(msg,<span class="string">&#x27;NewStateReason&#x27;</span>)</span><br><span class="line">    Region = getObject(msg,<span class="string">&#x27;Region&#x27;</span>)</span><br><span class="line">    instance = getObject(getObject(getObject(msg, <span class="string">&#x27;Trigger&#x27;</span>), <span class="string">&#x27;Dimensions&#x27;</span>)[<span class="number">0</span>], <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    chunk = <span class="string">&#x27;预警项目：%s\n实例名称：%s\n实例区域：%s\n预警时间：%s\n北京时间：%s\n预警内容：%s&#x27;</span> % (Name, instance, Region, Time, now, Reason)</span><br><span class="line"></span><br><span class="line">    data = parse.urlencode(&#123;<span class="string">&quot;chat_id&quot;</span>: os.environ[<span class="string">&#x27;CHAT_ID&#x27;</span>], <span class="string">&quot;text&quot;</span>: chunk&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        request.urlopen(url, data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;Failed to send the SNS message below:\n%s&#x27;</span> % chunk)</span><br><span class="line">        response = json.load(e)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;description&#x27;</span> <span class="keyword">in</span> response:</span><br><span class="line">            print(response[<span class="string">&#x27;description&#x27;</span>])</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>内存（MB）</strong>：<code>128 MB</code><br><strong>超时</strong>：<code>15 sec</code></p><p><strong>如果计划发布大型SNS消息，则可能需要将超时设置为30 sec甚至更高的值，以避免Lambda函数在将消息块转发到Telegram时超时。</strong></p><p><strong>环境变量</strong>：<code>设置Lambda函数的CHAT_ID和TOKEN环境变量（使用步骤1中的值）</code><br>例如：<br><img src="/images/16018739502505.jpg?50"></p><h3 id="发布函数"><a href="#发布函数" class="headerlink" title="发布函数"></a>发布函数</h3><p>发布您的Lambda函数的新版本。然后，从页面顶部复制功能ARN（包括版本后缀）。</p><h3 id="让SNS主题和Lambada关联"><a href="#让SNS主题和Lambada关联" class="headerlink" title="让SNS主题和Lambada关联"></a>让SNS主题和Lambada关联</h3><p>在Amazon SNS<strong>控制台</strong>中打开您的SNS主题。然后，点击您创建的主题，并且<code>创建订阅</code>，协议选择 <code>AWS Lambda</code>，选择刚刚发布的终端节点，使用上一步中的ARN为协议创建新的订阅。</p><h3 id="测试消息"><a href="#测试消息" class="headerlink" title="测试消息"></a>测试消息</h3><p>在Amazon SNS<strong>控制台</strong>中打开您的SNS主题。然后，发布测试消息。<br>该消息将传递给您与机器人的Telegram聊天。</p><h2 id="发送至不同Telegram"><a href="#发送至不同Telegram" class="headerlink" title="发送至不同Telegram"></a>发送至不同Telegram</h2><p>Lambda函数的不同发布版本可以具有TOKEN和CHAT_ID环境变量的不同值。因此，要将SNS通知从一个SNS主题转发到不同的Telegram聊天，您可以使用同一Lambda函数的不同版本创建两个订阅。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 rbenv 安装和管理 Ruby 版本</title>
      <link href="wiki/Mac/rbenv%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%A1%E7%90%86/"/>
      <url>wiki/Mac/rbenv%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>如果你是Ruby开发者应该知道用rvm来安装/管理Ruby版本，同时也能用它的gemset功能来管理各个工程的gems。因为rvm过于强大以至于违背了某个Linux软件开发原则。所以出现了很多轻便的替代者，其中来自37signals的rbenv就很受欢迎。</p><p>rbenv可以帮助你在一台机器上建立多个版本的ruby环境， 并提供方便的切换方法。</p><p><code>注意：rbenv和rvm是不兼容的，所以安装rbenv之前要先把rvm卸载。</code></p><h2 id="卸载rvm"><a href="#卸载rvm" class="headerlink" title="卸载rvm"></a>卸载rvm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm implode</span><br></pre></td></tr></table></figure><p>然后再将你zsh或bash中的这一句去掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s <span class="string">&quot;<span class="variable">$HOME</span>/.rvm/scripts/rvm&quot;</span> ]] &amp;&amp; . <span class="string">&quot;<span class="variable">$HOME</span>/.rvm/scripts/rvm&quot;</span> <span class="comment"># Load RVM function</span></span><br></pre></td></tr></table></figure><h2 id="安装rbenv"><a href="#安装rbenv" class="headerlink" title="安装rbenv"></a>安装rbenv</h2><h3 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h3><p>rbenv的源代码托管在github，在终端中从 github上将rbenv源码clone到本地，然后设置$PATH。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rbenv/rbenv.git ~/.rbenv</span><br><span class="line">Optionally, try to compile dynamic bash extension to speed up rbenv. Don<span class="string">&#x27;t worry if it fails; rbenv will still work normally:</span></span><br><span class="line"><span class="string">cd ~/.rbenv &amp;&amp; src/configure &amp;&amp; make -C src</span></span><br><span class="line"><span class="string">echo &#x27;</span><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.rbenv/bin:<span class="variable">$PATH</span>&quot;</span><span class="string">&#x27; &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="string">echo &#x27;</span><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(rbenv init -)</span>&quot;</span><span class="string">&#x27; &gt;&gt; ~/.bashrc</span></span><br></pre></td></tr></table></figure><p><code>注意:如果用Zsh，就用~/.zshrc替换~/.bash_profile。</code></p><p>重启shell或者运行exec $SHELL，就可以开始用rbenv了。</p><p>测试rbenv是否设置正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">type</span> rbenv</span><br><span class="line"><span class="comment">#=&gt; &quot;rbenv is a function&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Mac下安装"><a href="#Mac下安装" class="headerlink" title="Mac下安装"></a>Mac下安装</h3><p>如果你有安装Homebrew的话，可以用以下命令来安装rbenv和 ruby-build</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install rbenv</span><br><span class="line">$ brew install ruby-build</span><br></pre></td></tr></table></figure><p>配置并初始化SHELL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(rbenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p><code>注意:如果用 Zsh，就用~/.zshrc替换~/.bash_profile。</code></p><h2 id="更新rbenv"><a href="#更新rbenv" class="headerlink" title="更新rbenv"></a>更新rbenv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.rbenv</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="安装ruby-build"><a href="#安装ruby-build" class="headerlink" title="安装ruby-build"></a>安装ruby-build</h2><p>使用ruby-build可以自动下载编译安装Ruby相应的版本，只需指定版本号。</p><p>ruby-build是一个rbenv插件，用来编译安装Ruby源码。提供了一个<code>rbenv install</code>命令编译和安装类UNIX系统不同版本的Ruby。如果选择手动编译，可不使用这个工具。</p><h3 id="安装编译ruby的依赖"><a href="#安装编译ruby的依赖" class="headerlink" title="安装编译ruby的依赖"></a>安装编译ruby的依赖</h3><p>Ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline6 libreadline6-dev zlib1g zlib1g-dev</span><br></pre></td></tr></table></figure><p>CentOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc openssl-devel libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel</span><br></pre></td></tr></table></figure><h3 id="安装ruby-build-1"><a href="#安装ruby-build-1" class="headerlink" title="安装ruby-build"></a>安装ruby-build</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build</span><br><span class="line"><span class="built_in">cd</span> ~/.rbenv/plugins/ruby-build</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><h2 id="rbenv使用"><a href="#rbenv使用" class="headerlink" title="rbenv使用"></a>rbenv使用</h2><h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><p>查看可用的ruby版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv install --list</span><br></pre></td></tr></table></figure><p>安装2.3.0版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv install 2.3.0</span><br></pre></td></tr></table></figure><p>等待一会儿，安装完毕后可以查看已经安装的所有Ruby版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rbenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /root/.rbenv/version)</span><br><span class="line">  2.3.0</span><br></pre></td></tr></table></figure><p>显示所有版本，前面加*的为当前激活的版本。</p><h3 id="选择一个Ruby版本"><a href="#选择一个Ruby版本" class="headerlink" title="选择一个Ruby版本"></a>选择一个Ruby版本</h3><p>rbenv中的Ruby版本有三个不同的作用域：<code>全局(global)</code>，<code>本地(local)</code>，<code>当前终端(shell)</code>。</p><p>查找版本的优先级是当前终端&gt;本地&gt;全局。</p><h3 id="设置全局版本"><a href="#设置全局版本" class="headerlink" title="设置全局版本"></a>设置全局版本</h3><p>全局版本是在没有找到当前终端或本地作用域的设置时执行。通过以下命令设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv global 2.3.0</span><br></pre></td></tr></table></figure><h3 id="设置本地版本"><a href="#设置本地版本" class="headerlink" title="设置本地版本"></a>设置本地版本</h3><p>本地作用域是针对各个项目的，通过项目文件夹中的 <code>.rbenv-version</code> 这个文件进行管理，需要将相应的 Ruby 版本号写入这个文件。所以一般设置这个选项就可以了，这个过程可以通过以下命令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv <span class="built_in">local</span> 2.3.0</span><br></pre></td></tr></table></figure><p>会在当前目录下生成<code>.rbenv-version</code>文件，此文件会覆盖<code>rbenv global</code>设定。</p><p>如果想取消的话，可以这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv <span class="built_in">local</span> --<span class="built_in">unset</span></span><br></pre></td></tr></table></figure><h3 id="设置当前终端版本"><a href="#设置当前终端版本" class="headerlink" title="设置当前终端版本"></a>设置当前终端版本</h3><p>“<code>当前终端</code>“作用域的优先级最高。通过以下命令设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv shell 2.3.0</span><br></pre></td></tr></table></figure><h3 id="使用系统Ruby"><a href="#使用系统Ruby" class="headerlink" title="使用系统Ruby"></a>使用系统Ruby</h3><p>如果要使用系统原有的Ruby，则通过system指定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv global system</span><br></pre></td></tr></table></figure><p>每当切换ruby版本和执行bundle install之后必须执行这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv <span class="built_in">rehash</span></span><br></pre></td></tr></table></figure><p>设置完毕后可以通过以下命令进行验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> ruby  </span><br><span class="line"><span class="comment"># ~/.rbenv/shims/ruby</span></span><br></pre></td></tr></table></figure><h3 id="列出目前使用的版本"><a href="#列出目前使用的版本" class="headerlink" title="列出目前使用的版本"></a>列出目前使用的版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rbenv version</span><br><span class="line"><span class="comment">#2.3.0 (set by RBENV_VERSION environment variable)</span></span><br></pre></td></tr></table></figure><h3 id="列出irb这个命令的完整路径"><a href="#列出irb这个命令的完整路径" class="headerlink" title="列出irb这个命令的完整路径"></a>列出irb这个命令的完整路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv <span class="built_in">which</span> irb</span><br></pre></td></tr></table></figure><h3 id="列出包含irb这个命令的版本"><a href="#列出包含irb这个命令的版本" class="headerlink" title="列出包含irb这个命令的版本"></a>列出包含irb这个命令的版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv <span class="built_in">whence</span> irb</span><br></pre></td></tr></table></figure><h3 id="查看对应Ruby版主的目录"><a href="#查看对应Ruby版主的目录" class="headerlink" title="查看对应Ruby版主的目录"></a>查看对应Ruby版主的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv prefix</span><br></pre></td></tr></table></figure><h3 id="卸载Ruby"><a href="#卸载Ruby" class="headerlink" title="卸载Ruby"></a>卸载Ruby</h3><p>直接用用<code>rm -rf </code>命令删除<code>~/.rbenv/versions</code>文件夹下对应的Ruby版本即可</p><p>如果安装了 ruby-build 插件，那么使用如下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv uninstall 2.3.0</span><br></pre></td></tr></table></figure><h3 id="查看当前使用的ruby版本"><a href="#查看当前使用的ruby版本" class="headerlink" title="查看当前使用的ruby版本"></a>查看当前使用的ruby版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv version</span><br></pre></td></tr></table></figure><h3 id="安装gem"><a href="#安装gem" class="headerlink" title="安装gem"></a>安装gem</h3><p>使用rbenv后，gem还是按照原有的方式进行安装、升级，只是gem的安装路径是在~/.rbenv 文件夹中当前Ruby版本文件夹下。而且安装带有可执行文件的gem后，需要执行一个特别的命令，告诉rbenv更新相应的映射关系，这个命令在安装新版本的Ruby后也需要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbenv <span class="built_in">rehash</span></span><br></pre></td></tr></table></figure><h3 id="安装rails"><a href="#安装rails" class="headerlink" title="安装rails"></a>安装rails</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bundler rails</span><br></pre></td></tr></table></figure><h3 id="检查安装后的软件版本"><a href="#检查安装后的软件版本" class="headerlink" title="检查安装后的软件版本"></a>检查安装后的软件版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -v gem -v rake -V rails -v</span><br></pre></td></tr></table></figure><h3 id="告诉Rubygems安装软件包的时候不安装文档"><a href="#告诉Rubygems安装软件包的时候不安装文档" class="headerlink" title="告诉Rubygems安装软件包的时候不安装文档"></a>告诉Rubygems安装软件包的时候不安装文档</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;gem: --no-ri --no-rdoc&quot;</span> &gt; ~/.gemrc</span><br></pre></td></tr></table></figure><h2 id="一些好用的rbenv插件"><a href="#一些好用的rbenv插件" class="headerlink" title="一些好用的rbenv插件"></a>一些好用的rbenv插件</h2><p>ruby-build<br>自动编译安装ruby</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build</span><br></pre></td></tr></table></figure><p>gemset<br>管理gemset</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jf/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset</span><br></pre></td></tr></table></figure><p>rbenv-gem-rehash<br>通过gem命令安装完gem后无需手动输入rbenv rehash命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rbenv/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash</span><br></pre></td></tr></table></figure><p>rbenv-update<br>通过rbenv update命令来更新rbenv以及所有插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rkh/rbenv-update ~/.rbenv/plugins/rbenv-update</span><br></pre></td></tr></table></figure><p>rbenv-aliases</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tpope/rbenv-aliases.git ~/.rbenv/plugins/rbenv-aliases</span><br></pre></td></tr></table></figure><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><p>rbenv安装太慢的解决办法</p><p>rbenv+ruby-build插件，可以直接使用命令<code>rbenv install 2.3.0</code>安装对应的ruby版本。但这样太慢，很长时间都在下载。</p><p>解决方法</p><p>使用国内镜像源<br>因为检查md5sum，所以需要在url后面加个#或者?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env</span> RUBY_BUILD_MIRROR_URL=https://ruby.taobao.org/mirrors/ruby/ruby-2.3.0.tar.gz<span class="comment"># rbenv install 2.3.0</span></span><br></pre></td></tr></table></figure><p>使用wget下载<br>如果速度还慢，可以用wget先下载完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget -q https://ruby.taobao.org/mirrors/ruby/ruby-2.3.0.tar.gz -O ~/.rbenv/versions/ruby-2.3.0.tar.gz</span><br><span class="line">$ env RUBY_BUILD_MIRROR_URL=file:///root/.rbenv/versions/ruby-2.3.0.tar.gz<span class="comment"># rbenv install 2.3.0</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://about.ac/2012/04/install-ruby-with-rbenv.html">https://about.ac/2012/04/install-ruby-with-rbenv.html</a></li><li><a href="https://www.dreamxu.com/install-ruby-on-mac-with-rbenv/">https://www.dreamxu.com/install-ruby-on-mac-with-rbenv/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="wiki/hello-world/"/>
      <url>wiki/hello-world/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5234025fbecccd37466c44b113e492495152ddede9e20e20f97875c08c133882">8e935a4edef6ea00bc1ec8f8942232fd747e22e63664b3ebfa4a3174dbf2730c89afec72043f70eb52300dbcae1777fe7299db55cbcd09075342947454049e573819e696bbc678b316f21709a7c09c9ce46d6a2781be7e103366972e0754b377f9ec8e734c8f091806f02d31fae1625ae8a05696381dedd4ab8c571f3110d9905e5ec3d0d772a6cb571f5a92b7e78b4ecc9a4d308ec0c5c067007a2af8f67680c3cdd0d8e7fe7da7418fa58645cb8ad805be05c228b74837bc26bf9371f6e166dac43f5c0df1de8b560754c266f48b6781c3186b15fb8469b88e0ba16b0d212a2d75add86db54c54d2d8bef55fe1f65d6a353c237fca01021a0817138f002758dc53db8a1916a3540978939198938448a629f745d6d1bc5eb7dfef8c7d145cd8eff944af5bc2ae315702c8885817748c0e4c392a9be089752633f22a0d6bba13408b8e9b32a08ebef813ec439a5be8d33a760d180f9cb52d1267ea4c8658e958d2aec4ad71c4a2a4bfe7f0310868d6c3089123b38a32d53e3a28988af8d9d4bd3e003df39df6fdf1d3c7d43b67436723f7c6e8c5b84b59ba4e116933790294bad7ac022154aa4d2d3bc95c6fa7952a731dee2bcfab076950e4d2c4170cba1ac284335b7abb97cacd73965fb012895f5acef2f14d4bf852dfc86e876e588227e89f8892d974e15a5eb160c37c33f88861c13293d3555822bf1b2e49d289ba3c6c2b1343dd95e1da19600378c2c0c0acc972b3175a04bab85d4aee0255e5403b5bdc7b10c36cb48062dc9a8e05c260c3f81abf7dcda7f8353e86259c2f9581d9f03c640f6721c580b1c968c15e192733aec9049f3ad8a1e24ec57b062057f5f86f1587dc3d82ba8fe7a0317fdfe00018aa79a2b1a7cdde7c8ee7a0f4864c0377f03a1abb7451ec3b07c17bb0614f82cce9c1bfbec2e9e7ab109d56a12076a3d121932c905c8295f87bc8fb9ff1d7b4bec4b0d034fecb37e3d7a6852c96182147a008e8c91a9a7d541115701e98545ddcf8d462f9f864042569c723cd6c7bf4a685eba81f01ac6497dbeb737c87babaa4a9323befb259dda6e85de1b38c2f8c8afb041c917f589960bc4ae4b634b9c27cea6a28f2f4413cb12db1c461db3947435234aad91caa7139c28ff2d153b60d442ddbfb45f25426de7ca9a3c9278b540f20d13e52ea3dfe7313e704dd7585a18ddfcfe6424e1c18db46502210e0b6383f2f4756988ea1509bb6477f16a8f3dbd3026a62c839cee78995d73a7cc5d917f9496cbf74466569b30a40799397745efa8c1a9280a656adb68eec8083f6216ed0c4ccd632c8a96196abe467dc3ec4bc7e440a5930315fa1ee4e266924e3d158cc83b4cba9970215244f4f2410f35269ef9c3b2fc14d3d75cf1f931d27abc4534075c822e01ce67dd6d3a6a9b2b37ac2de96e776cca45da37017a03d6182f78d9357c7cbafa52e7c8034860b24072c533ff542992f95aff6f64d2e7022b654a4a344d1f139133eb8c8813f15a7bfbfdbc88dea15ae9f57fdd5a4f460ce354ae13d837d152bccd5932d0b350d5e829891d8f946722f4c90dd323478711c3a54172e1d985b0465b6ffac90f33612cf9cde856012e29a4be6c207a7d10ad6a6c88860ccd307aaf306ecf61d43469a369cb221a61bed13030ae5b06657276ac6ff90c3919ceb002a725c62994e83d2d9fe0d111450459c8504429c0b5dad31d90daa2016169f4579872d0a2202f1d548b87c4a0bdb6bcc1cb02f87f2ca911a0013b556bee805e32641293c3fd0add9c2eeb6f77f3529422dcd1f39ab65e275493646aabe4f724aad1cb870b0775feaaecb8ad29766c05155972c74e6f94e16ec9530b62e233fc0a8808519e620c8f8b14f030d92fe64d1c9050b8fce23ba795b8c6450debbda8be1ffc29ed4df21f8b5c6f8f5bca8a9a8cad168b3980d822ae01b622bc4343d653d6505c62331907dc7ee1077f2f99e5d4d358f5f93ce747f67c97b2400aaa59dcf4d36b04f9cacba95f6885aff4eca83f94a3605ace5125aa86c9f75431520cf9ad3fde579ff6dceca6e3a07ec1e3ee4d75b577476fb2e4173a2d6b0f974ff27a59de9042f33cbfa97e45f036815c0015cd508e276c51d5da691595b866bb5ce56a9539ce37f5f6d39ba18ee1b35ade4f473346cbab031b729ad1120d31f3f61a8638d25e26918d09c7fe062f92e599eae53dc1ef4a81cfdc8556279bea94eb43f4fde47bd12a8a3e4ec12f76db943008109f3fa42924e5d90b1027fd3e5e7637be7bcb198fc8e16be50dcebe5c358c4129cb92270fb7e4f3c0fbf828299049520c1fd3fdff72092c13617de7be12c1e775db0b57ccc84e3c6173b7d3b61c4b9cda807ace1d008063b8c2e31e44bdfd25dee2a1d66a40f00d5fa1d4a5312a255a8c3d21ba033f457aec2b3b220207d4f95ea79b59d6f2fb0db6a654b5ef3d6aaa17ca52fbb5c39f346dddbfe7e9cd3993e90e3a769110b58b60c58c27b38b4c25689c7001463701ac023114d52771de3538bde525c55f7a5b6f6a005884e079c0bf060c49236a9b22fb2f0348e895dfd5b2aec32baae5387fcc120e1b0e7667ec44ce5c701d93784605fd1c62f4a06da16c0e795ae5155dc55cc3ab0086920bc5a3a9217cfe574dd8edf7e46f0c54c1c9bd08f02b4c7c92cd381d885223ab78998b9a86decb5717c6ee628d93d82adff07152f0d367e5c2e5bb2522d10616ad59db91f0e3ff1b1f8bc6c83278cc05e3d1843377193d7ec3864b9246d81fe69ba3c0308600d7c18d05bbf716c7c10496701abbdeda716b385838985b468fbc747d366f872b0df9362b880b835d2a76cc20bfd4dff02ee6f224896cfd7388b5f4583be9242cb05e16faa4736e24d429274ce799309cc4b1cf021c51d0a8d15bbb466fd2491fc871f9c12d2e32cd875562bc6e71158765594e7f6112d56f2c021278981cda2ed6fc3181a832a7a8c34e725dcabd9638c8a193a911e8bb3bfb41b940eb371c111ac516b2b759e501275fd761346eb9ab5bef1546e4392bd128df66bca1fdfb46830d5910b50bdeb5f03ebda6df97dfc7193788193790006c68acd066ddc4bc6e34fb51b5a3e1089d458ad059acca0771f78b98ff1e3dcf5dab4c32eefe9ca9a33a7f4dca28de044a7</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux查看硬件信息</title>
      <link href="wiki/Linux/Linux-cmd/"/>
      <url>wiki/Linux/Linux-cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uname -a                            <span class="comment"># 查看内核/操作系统/CPU信息</span></span><br><span class="line">head -n 1 /etc/issue                <span class="comment"># 查看操作系统版本</span></span><br><span class="line">cat /proc/cpuinfo                   <span class="comment"># 查看CPU详细信息</span></span><br><span class="line">lscpu                               <span class="comment"># 查看CPU信息</span></span><br><span class="line">hostname                            <span class="comment"># 查看计算机名</span></span><br><span class="line">lspci -tv                           <span class="comment"># 列出所有PCI设备（yum install pciutils）</span></span><br><span class="line">lsusb -tv                           <span class="comment"># 列出所有USB设备</span></span><br><span class="line">lsmod                               <span class="comment"># 列出加载的内核模块</span></span><br><span class="line">env                                 <span class="comment"># 查看环境变量</span></span><br></pre></td></tr></table></figure><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free -m                             <span class="comment"># 查看内存使用量和交换区使用量</span></span><br><span class="line">df -h                               <span class="comment"># 查看各分区使用情况</span></span><br><span class="line">du -sh &lt;目录名&gt;                      <span class="comment"># 查看指定目录的大小</span></span><br><span class="line">grep MemTotal /proc/meminfo         <span class="comment"># 查看内存总量</span></span><br><span class="line">grep MemFree /proc/meminfo          <span class="comment"># 查看空闲内存量</span></span><br><span class="line">uptime                              <span class="comment"># 查看系统运行时间、用户数、负载</span></span><br><span class="line">cat /proc/loadavg                   <span class="comment"># 查看系统负载</span></span><br></pre></td></tr></table></figure><h2 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount | column -t                   <span class="comment"># 查看挂接的分区状态</span></span><br><span class="line">fdisk -l                            <span class="comment"># 查看所有分区</span></span><br><span class="line">swapon -s                           <span class="comment"># 查看所有交换分区</span></span><br><span class="line">hdparm -i /dev/hda                  <span class="comment"># 查看磁盘参数(仅适用于IDE设备)</span></span><br><span class="line">dmesg | grep IDE                    <span class="comment"># 查看启动时IDE设备检测状况</span></span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifconfig                            <span class="comment"># 查看所有网络接口的属性</span></span><br><span class="line">iptables -L                         <span class="comment"># 查看防火墙设置</span></span><br><span class="line">mtr IP                              <span class="comment"># 查看本机到目标主机的路由及丢包情况</span></span><br><span class="line">route -n                            <span class="comment"># 查看路由表</span></span><br><span class="line">netstat -lntp                       <span class="comment"># 查看所有监听端口</span></span><br><span class="line">netstat -antp                       <span class="comment"># 查看所有已经建立的连接</span></span><br><span class="line">netstat -s                          <span class="comment"># 查看网络统计信息</span></span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef                              <span class="comment"># 查看所有进程</span></span><br><span class="line">top                                 <span class="comment"># 实时显示进程状态</span></span><br></pre></td></tr></table></figure><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w                                   <span class="comment"># 查看活动用户</span></span><br><span class="line">id &lt;用户名&gt;                          <span class="comment"># 查看指定用户信息</span></span><br><span class="line">last                                <span class="comment"># 查看用户登录日志</span></span><br><span class="line">cut -d: -f1 /etc/passwd             <span class="comment"># 查看系统所有用户</span></span><br><span class="line">cut -d: -f1 /etc/group              <span class="comment"># 查看系统所有组</span></span><br><span class="line">crontab -l                          <span class="comment"># 查看当前用户的计划任务</span></span><br></pre></td></tr></table></figure><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list                    <span class="comment"># 列出所有系统服务</span></span><br><span class="line">chkconfig --list | grep on          <span class="comment"># 列出所有启动的系统服务</span></span><br></pre></td></tr></table></figure><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa                             <span class="comment"># 查看所有安装的软件包</span></span><br></pre></td></tr></table></figure><h2 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep Ethernet               <span class="comment"># 查看网卡型号</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简介</title>
      <link href="wiki/Docker/docker%E7%AE%80%E4%BB%8B/"/>
      <url>wiki/Docker/docker%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前公司的项目部署，采用的是 <code>git+jenkins</code> 的半自动化部署方式，代码自动化，但环境非自动化。开发环境、测试环境，以及生产环境的软件安装，以及python包的安装，必须要按照部署文档来一遍，确保两边版本一致，这样才能尽量减少由于环境不一致带来的bug。</p><p>但是对于研发人员本地机器环境，以及测试人员的测试环境，那可是一人一个环境，变量太多，动不动就会听到这样的对话：</p><p><code>    测试：你这里又出了bug！！!</code><br><code>    开发：不可能，肯定是你机器的问题！！！</code></p><p>依据设计模式的准则（哈哈，设计模式用到这里有点牵强），这里违反了<code>接口隔离原则: 你要让接口简单，只做它必须做的事，这样才易懂易重用。</code>，代码的运行环境，不应该是程序员或测试应该考虑的，他们应该做自己最主要的事情，一方面可以提高时间的利用率；另一方面，这样不会造成扯皮，从而提高了协作办公的效率。</p><p>有人提出了建议，做一个虚拟机，把环境配置好，然后拷贝镜像给不同的人用不就好了。但是，VM吃资源的能力，大家都是有目共睹的。而且如果要安装或更新软件, 又得重新来一遍, 可是有的折腾了.</p><p>正好最近两年Docker变得流行起来，Docker的轻量级也吸引越来越多的开发者来使用，Docker 容器相对于 VM 有以下几个优点：</p><ul><li>启动速度快，容器通常在一秒内可以启动，而 VM 通常要更久</li><li>资源利用率高，一台普通 PC 可以跑上千个容器，你跑上千个 VM 试试</li><li>性能开销小， VM 通常需要额外的 CPU 和内存来完成 OS 的功能，这一部分占据了额外的资源</li></ul><p>为啥相似的功能在性能上会有如此巨大的差距呢，其实这和他们的设计的理念是相关的。 VM 的设计图如下：</p><p><img src="/images/16010323640225.jpg"></p><p>VM 的 Hypervisor 需要实现对硬件的虚拟化，并且还要搭载自己的操作系统，自然在启动速度和资源利用率以及性能上有比较大的开销。而 Docker 的设计图是这样的： </p><p><img src="/images/16010323858807.jpg"></p><p>Docker 几乎就没有什么虚拟化的东西，并且直接复用了 Host 主机的 OS，在 Docker Engine 层面实现了调度和隔离重量一下子就降低了好几个档次。 Docker 的容器利用了 LXC(从 0.9 版本开始使用 libcontainer 替代 lxc)，管理利用了 namespaces 来做权限的控制和隔离，cgroups 来进行资源的配置，并且还通过 aufs 来进一步提高文件系统的资源利用率。</p><p><img src="/images/16010324131380.jpg"></p><h2 id="镜像、容器、仓库之间的关系"><a href="#镜像、容器、仓库之间的关系" class="headerlink" title="镜像、容器、仓库之间的关系"></a>镜像、容器、仓库之间的关系</h2><p><img src="/images/16010324219407.jpg"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>Docker充分利用了一项称为namespaces的技术来提供隔离的工作空间，我们称之为 container(容器)。当你运行一个容器的时候，Docker为该容器创建了一个命名空间集合。</p><p>这样提供了一个隔离层，每一个应用在它们自己的命名空间中运行而且不会访问到命名空间之外。</p><p>一些Docker使用到的命名空间有：</p><ul><li><p>pid namespace<br>不同用户的进程就是通过 pid namespace 隔离开的，且不同 namespace 中可以有相同 PID。具有以下特征:</p><ol><li>每个 namespace 中的 pid 是有自己的 pid=1 的进程(类似 /sbin/init 进程)</li><li>每个 namespace 中的进程只能影响自己的同一个 namespace 或子 namespace 中的进程</li><li>因为 /proc 包含正在运行的进程，因此在 container 中的 pseudo-filesystem 的 /proc 目录只能看到自己 namespace 中的进程</li><li>因为 namespace 允许嵌套，父 namespace 可以影响子 namespace 的进程，所以子 namespace 的进程可以在父 namespace 中看到，但是具有不同的 pid</li></ol></li><li><p>mnt namespace<br>类似 chroot，将一个进程放到一个特定的目录执行。mnt namespace 允许不同 namespace 的进程看到的文件结构不同，这样每个 namespace 中的进程所看到的文件目录就被隔离开了。同 chroot 不同，每个 namespace 中的 container 在 /proc/mounts 的信息只包含所在 namespace 的 mount point。</p></li><li><p>net namespace<br>网络隔离是通过 net namespace 实现的， 每个 net namespace 有独立的 network devices, IP addresses, IP routing tables, /proc/net 目录。这样每个 container 的网络就能隔离开来。 docker 默认采用 veth 的方式将 container 中的虚拟网卡同 host 上的一个 docker bridge 连接在一起。</p></li><li><p>uts namespace<br>UTS (“UNIX Time-sharing System”) namespace 允许每个 container 拥有独立的 hostname 和 domain name, 使其在网络上可以被视作一个独立的节点而非 Host 上的一个进程。</p></li><li><p>ipc namespace<br>container 中进程交互还是采用 Linux 常见的进程间交互方法 (interprocess communication - IPC), 包括常见的信号量、消息队列和共享内存。然而同 VM 不同，container 的进程间交互实际上还是 host 上具有相同 pid namespace 中的进程间交互，因此需要在IPC资源申请时加入 namespace 信息 - 每个 IPC 资源有一个唯一的 32bit ID。</p></li><li><p>user namespace<br>每个 container 可以有不同的 user 和 group id, 也就是说可以以 container 内部的用户在 container 内部执行程序而非 Host 上的用户。</p></li></ul><p>有了以上 6 种 namespace 从进程、网络、IPC、文件系统、UTS 和用户角度的隔离，一个 container 就可以对外展现出一个独立计算机的能力，并且不同 container 从 OS 层面实现了隔离。 然而不同 namespace 之间资源还是相互竞争的，仍然需要类似 ulimit 来管理每个 container 所能使用的资源 - cgroup。</p><h3 id="cgroup"><a href="#cgroup" class="headerlink" title="cgroup"></a>cgroup</h3><p>cgroup的功能在于将一台计算机上的资源(CPU,memory, network)进行分片，来防止进程间不利的资源抢占。</p><h3 id="AUFS"><a href="#AUFS" class="headerlink" title="AUFS"></a>AUFS</h3><p>AUFS (AnotherUnionFS)  是个很有意思的东西，是 UnionFS 的一种。他的思想和 git 有些类似，可以把对文件系统的改动当成一次 commit 一层层的叠加。这样的话多个容器之间就可以共享他们的文件系统层次，每个容器下面都是共享的文件系统层次，上面再是各自对文件系统改动的层次，这样的话极大的节省了对存储的需求，并且也能加速容器的启动。</p><p>想要从一个image启动一个container，docker会先加载其父image直到base image，用户的进程运行在writeable的layer中。所有parent image中的数据信息以及 ID、网络和lxc管理的资源限制等具体container的配置，构成一个docker概念上的container。如下图:</p><p><img src="/images/16010326726420.jpg"></p><h2 id="What-docker-do-more-than-LXC"><a href="#What-docker-do-more-than-LXC" class="headerlink" title="What docker do more than LXC"></a>What docker do more than LXC</h2><p>看似docker主要的OS级虚拟化操作是借助LXC, AUFS只是锦上添花。那么肯定会有人好奇docker到底比LXC多了些什么。无意中发现 stackoverflow 上正好有人问这个问题， 回答者是Dotcloud的创始人，出于备忘目的原文摘录如下。</p><p><a href="http://stackoverflow.com/questions/17989306/what-does-docker-add-to-just-plain-lxc">http://stackoverflow.com/questions/17989306/what-does-docker-add-to-just-plain-lxc</a></p><h2 id="Docker-网络配置"><a href="#Docker-网络配置" class="headerlink" title="Docker 网络配置"></a>Docker 网络配置</h2><p>参考: <a href="http://www.infoq.com/cn/articles/docker-network-and-pipework-open-source-explanation-practice">http://www.infoq.com/cn/articles/docker-network-and-pipework-open-source-explanation-practice</a></p><p><img src="/images/16010327022210.jpg"></p><p>docker run 创建 Docker 容器时，可以用 –net 选项指定容器的网络模式，Docker 有以下 4 种网络模式：</p><ul><li>host 模式，使用 –net=host 指定。</li><li>container 模式，使用 –net=container:NAMEorID 指定。</li><li>none 模式，使用 –net=none 指定。</li><li>bridge 模式，使用 –net=bridge 指定，默认设置。</li></ul><h3 id="host-模式"><a href="#host-模式" class="headerlink" title="host 模式"></a>host 模式</h3><p>如果启动容器的时候使用 host 模式，那么这个容器将不会获得一个独立的 Network Namespace，而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。</p><p>例如，我们在 10.10.101.105/24 的机器上用 host 模式启动一个含有 web 应用的 Docker 容器，监听 tcp 80 端口。当我们在容器中执行任何类似 ifconfig 命令查看网络环境时，看到的都是宿主机上的信息。而外界访问容器中的应用，则直接使用 10.10.101.105:80 即可，不用任何 NAT 转换，就如直接跑在宿主机中一样。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><h3 id="container-模式"><a href="#container-模式" class="headerlink" title="container 模式"></a>container 模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><h3 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h3><p>这个模式和前两个不同。在这种模式下，Docker 容器拥有自己的 Network Namespace，但是，并不为 Docker容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p><h3 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h3><p>bridge 模式是 Docker <strong>默认</strong>的网络设置，此模式会为每一个容器分配 Network Namespace、设置 IP 等，并将一个主机上的 Docker 容器连接到一个虚拟网桥上。当 Docker server 启动时，会在主机上创建一个名为 docker0 的虚拟网桥，此主机上启动的 Docker 容器会连接到这个虚拟网桥上。</p><p><img src="/images/16010327281206.jpg"></p><p>虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。接下来就要为容器分配 IP 了，Docker 会从 RFC1918 所定义的私有 IP 网段中，选择一个和宿主机不同的IP地址和子网分配给 docker0，连接到 docker0 的容器就从这个子网中选择一个未占用的 IP 使用。如一般 Docker 会使用 172.17.0.0/16 这个网段，并将 172.17.42.1/16 分配给 docker0 网桥（在主机上使用 ifconfig 命令是可以看到 docker0 的，可以认为它是网桥的管理接口，在宿主机上作为一块虚拟网卡使用）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.open-open.com/lib/view/open1423703640748.html">http://www.open-open.com/lib/view/open1423703640748.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes中ingress配置ssl证书</title>
      <link href="wiki/Kubernetes/index/"/>
      <url>wiki/Kubernetes/index/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kubernetes 中的 <code>ingress</code> 类似于 <code>nginx</code> 中的配置文件，如果需要给某个域名配置证书，需要修改对应的 <code>ingress</code>，将证书关联进去。</p><p>但直接生成的证书文件是不能用的，需要添加到 <code>secret</code>中，然后将这个 <code>secret</code> 与 <code>ingress</code> 关联起来。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="第一步：-生成证书"><a href="#第一步：-生成证书" class="headerlink" title="第一步： 生成证书"></a>第一步： 生成证书</h3><p>从其它地方申请证书，免费或收费的皆可，然后将证书文件上传到服务器上。</p><h3 id="第二步：生成-secret"><a href="#第二步：生成-secret" class="headerlink" title="第二步：生成 secret"></a>第二步：生成 <code>secret</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls yoursecret-name --cert=full_chain.pem --key=private.key --dry-run</span><br></pre></td></tr></table></figure><p>注：<code>--dry-run 是用于检测生成过程是否会出错，要真实生成的话，把这个去掉</code></p><h3 id="第三步：在-ingress-中关联-secret"><a href="#第三步：在-ingress-中关联-secret" class="headerlink" title="第三步：在 ingress 中关联 secret"></a>第三步：在 <code>ingress</code> 中关联 <code>secret</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 ingress</span></span><br><span class="line">kubectl edit ingress Appname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做如下修改</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: Appname</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: domain.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: Appname-server</span><br><span class="line">          servicePort: 80</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - domain.com</span><br><span class="line">    secretName: yoursecret-name</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-multi-ssl?hl=zh-cn">https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-multi-ssl?hl=zh-cn</a></li><li><a href="https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster/">https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
